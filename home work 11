import numpy as np
import random
#args:
# f - function to find a derivitive
# x1 - x1 is coord
def derivitive(f, x1):
    dx = 0.000001
    x2 = x1 + dx
    y1 = f(x1)
    y2 = f(x2)
    dy = y2 - y1
    return dy / dx

f = lambda x: x ** 2

def find_min(f, learning_rate = 0.001, itter_count = 1000, currentX = None):
    steps = 0
    if currentX is None:
        currentX = random.randint(-10, 10)
    for i in range(itter_count):
        der = derivitive(f, currentX)
        currentX -= learning_rate * der
        if -0.05 < der < 0.05:
            return print(currentX), print(steps)
        print(currentX)
        steps += 1
    print(currentX)
    print(steps)

Y = X^2 learning_rate 10 start_point 10 С таким learning_rate мы никогда не найдём 0 функции 
Y = X^2 learning_rate 1 start_point 10 С таким learning_rate мы никогда не найдём 0 функции 
Y = X^2 learning_rate 0.1 start_point 10 required count of steps = 27 
Y = X^2 learning_rate 0.01 start_point 10 required count of steps = 297
Y = X^2 learning_rate 0.001 start_point 10 required count of steps = 2993
Y = X^2 learning_rate 0.0001 start_point 10 required count of steps = 29955
Y = X^2 learning_rate 10 start_point 5 С таким learning_rate мы никогда не найдём 0 функции 
Y = X^2 learning_rate 1 start_point 5 С таким learning_rate мы никогда не найдём 0 функции 
Y = X^2 learning_rate 0.1 start_point 5 required count of steps = 24
Y = X^2 learning_rate 0.01 start_point 5 required count of steps = 263
Y = X^2 learning_rate 0.001 start_point 5 required count of steps = 2647
Y = X^2 learning_rate 0.0001 start_point 5 required count of steps = 26489
f = lambda x: abs(x) ** 0.5

def find_min(f, learning_rate = 0.001, itter_count = 1000, currentX = None):
    steps = 0
    if currentX is None:
        currentX = random.randint(-10, 10)
    for i in range(itter_count):
        steps += 1
        der = derivitive(f, currentX)
        currentX -= learning_rate * der
        if  -0.05 < der ** -1 < 0.05:
            return print(currentX), print(steps)
        print(currentX)
    print(currentX)
    print(steps)

y = sqrt(|x|) learning_rate 10 start_point 10 С таким learning_rate мы никогда не найдём 0 функции 
y = sqrt(|x|) learning_rate 1 start_point 10 С таким learning_rate мы никогда не найдём 0 функции 
y = sqrt(|x|) learning_rate 0.1 start_point 10 С таким learning_rate 424
y = sqrt(|x|) learning_rate 0.01 start_point 10 С таким learning_rate 4264
y = sqrt(|x|) learning_rate 0.001 start_point 10 С таким learning_rate 42180
